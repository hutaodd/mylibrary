/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GitSyncPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var child_process = __toESM(require("child_process"));
var DEFAULT_SETTINGS = {
  gitRepoPath: "",
  syncButtonLocation: "ribbon"
};
var GitSyncPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new GitSyncSettingTab(this.app, this));
    this.addSyncButton();
    this.addCommand({
      id: "git-sync",
      name: "\u6267\u884CGit\u540C\u6B65",
      callback: () => this.syncGit()
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  addSyncButton() {
    if (this.settings.syncButtonLocation === "ribbon") {
      this.ribbonIconEl = this.addRibbonIcon("sync", "Git\u540C\u6B65", (evt) => {
        this.syncGit();
      });
    } else {
      this.statusBarItem = this.addStatusBarItem();
      this.statusBarItem.setText("Git\u540C\u6B65");
      this.statusBarItem.onClickEvent(() => this.syncGit());
    }
  }
  async syncGit() {
    if (!this.settings.gitRepoPath) {
      new import_obsidian.Notice("\u8BF7\u5148\u5728\u8BBE\u7F6E\u4E2D\u914D\u7F6EGit\u4ED3\u5E93\u8DEF\u5F84");
      return;
    }
    new import_obsidian.Notice("\u5F00\u59CB\u540C\u6B65...");
    try {
      const status = await this.execGitCommand("git status --porcelain");
      const hasLocalChanges = status.trim().length > 0;
      if (hasLocalChanges) {
        await this.execGitCommand("git add .");
        await this.execGitCommand('git commit -m "Auto sync: ' + new Date().toISOString() + '"');
        new import_obsidian.Notice("\u672C\u5730\u66F4\u6539\u5DF2\u63D0\u4EA4");
      }
      const pullResult = await this.execGitCommand("git pull");
      if (pullResult.includes("Already up to date.")) {
        new import_obsidian.Notice("\u672C\u5730\u5DF2\u662F\u6700\u65B0\uFF0C\u65E0\u9700\u4ECEGitee\u62C9\u53D6");
      } else {
        new import_obsidian.Notice("\u4ECEGitee\u6210\u529F\u62C9\u53D6\u66F4\u65B0");
      }
      if (hasLocalChanges) {
        await this.execGitCommand("git push");
        new import_obsidian.Notice("\u672C\u5730\u66F4\u6539\u5DF2\u63A8\u9001\u5230Gitee");
      } else {
        const pushResult = await this.execGitCommand("git push");
        if (pushResult.includes("Everything up-to-date")) {
          new import_obsidian.Notice("Gitee\u5DF2\u662F\u6700\u65B0\uFF0C\u65E0\u9700\u63A8\u9001");
        } else {
          new import_obsidian.Notice("\u6210\u529F\u63A8\u9001\u66F4\u65B0\u5230Gitee");
        }
      }
      if (!hasLocalChanges && pullResult.includes("Already up to date.")) {
        new import_obsidian.Notice("\u672C\u5730\u548CGitee\u90FD\u662F\u6700\u65B0\u7684\uFF0C\u6CA1\u6709\u9700\u8981\u540C\u6B65\u7684\u66F4\u6539");
      } else {
        new import_obsidian.Notice("\u540C\u6B65\u5B8C\u6210");
      }
    } catch (error) {
      new import_obsidian.Notice("\u540C\u6B65\u5931\u8D25: " + error);
    }
  }
  async execGitCommand(command) {
    return new Promise((resolve, reject) => {
      child_process.exec(command, { cwd: this.settings.gitRepoPath }, (error, stdout, stderr) => {
        if (error) {
          reject(error);
        } else {
          resolve(stdout);
        }
      });
    });
  }
};
var GitSyncSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Git\u4ED3\u5E93\u8DEF\u5F84").setDesc("\u8BBE\u7F6EGit\u4ED3\u5E93\u7684\u672C\u5730\u8DEF\u5F84").addText((text) => text.setPlaceholder("\u8F93\u5165Git\u4ED3\u5E93\u8DEF\u5F84").setValue(this.plugin.settings.gitRepoPath).onChange(async (value) => {
      this.plugin.settings.gitRepoPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u540C\u6B65\u6309\u94AE\u4F4D\u7F6E").setDesc("\u9009\u62E9\u540C\u6B65\u6309\u94AE\u663E\u793A\u7684\u4F4D\u7F6E").addDropdown((dropdown) => dropdown.addOption("ribbon", "\u5DE6\u4FA7\u529F\u80FD\u533A").addOption("statusBar", "\u72B6\u6001\u680F").setValue(this.plugin.settings.syncButtonLocation).onChange(async (value) => {
      var _a, _b;
      this.plugin.settings.syncButtonLocation = value;
      await this.plugin.saveSettings();
      (_a = this.plugin.ribbonIconEl) == null ? void 0 : _a.remove();
      (_b = this.plugin.statusBarItem) == null ? void 0 : _b.remove();
      this.plugin.addSyncButton();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
