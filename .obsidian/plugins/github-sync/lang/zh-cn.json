{
    "manifest": {
        "translationVersion": 1733160394178,
        "pluginVersion": "1.0.5"
    },
    "description": {
        "original": "Sync vault to personal GitHub.",
        "translation": "Sync vault to personal GitHub."
    },
    "dict": {
        "Notice(\"Syncing to GitHub remote\")": "Notice(\"同步到 GitHub 远程\")",
        "Notice(\"Vault is not a Git repo or git binary cannot be found.\", 1e4)": "Notice(\"仓库不是Git仓库，或者找不到Git二进制文件。\", 1e4)",
        "Notice(e)": "Notice(e)",
        "Notice(\"Working branch clean\")": "Notice(\"清除分支\")",
        "Notice(e + \"\\nGitHub Sync: Invalid remote URL.\", 1e4)": "Notice(e + \"\\nGitHub Sync: 无效的远程地址.\", 1e4)",
        "Notice(\"GitHub Sync: Successfully set remote origin url\")": "Notice(\"GitHub Sync: 成功设置远端源地址\")",
        "Notice(\"GitHub Sync: Pulled \" + update.summary.changes + \" changes\")": "Notice(\"GitHub Sync: 拉取\" + update.summary.changes + \" 变更\")",
        "Notice(e2, 1e4)": "Notice(e2, 1e4)",
        "Notice(conflictMsg)": "Notice(conflictMsg)",
        "Notice(\"GitHub Sync: Pushed on \" + msg)": "Notice(\"GitHub Sync: 提交 \" + msg)",
        "Notice(e, 1e4)": "Notice(e, 1e4)",
        "Notice(\"Auto sync enabled\")": "Notice(\"已开启自动同步\")",
        "Notice(\"GitHub Sync: \" + statusUponOpening.behind + \" commits behind remote.\\nClick the GitHub ribbon icon to sync.\")": "Notice(\"GitHub Sync: \" + statusUponOpening.behind + \" 远程提交。\\n点击GitHub功能区图标同步。\")",
        "Notice(\"GitHub Sync: up to date with remote.\")": "Notice(\"GitHub Sync: 同步到云端\")",
        " log(`checking %s`, path)": " log(`checking %s`, path)",
        " log(`[OK] path represents a file`)": " log(`[OK] path represents a file`)",
        " log(`[OK] path represents a directory`)": " log(`[OK] path represents a directory`)",
        " log(`[FAIL] path represents something other than a file or directory`)": " log(`[FAIL] path represents something other than a file or directory`)",
        " log(`[FAIL] path is not accessible: %o`, e)": " log(`[FAIL] path is not accessible: %o`, e)",
        " log(`[FATAL] %o`, e)": " log(`[FATAL] %o`, e)",
        " log(name)": " log(name)",
        " log(...rest)": " log(...rest)",
        ".log(string, string)": ".log(string, string)",
        ".log({ from: string, to: string })": ".log({ from: string, to: string })",
        "_log();\n    init_merge()": "_log();\n    init_merge()",
        "_log();\n  }\n})": "_log();\n  }\n})",
        "_error();\n    GitResponseError = class extends GitError {\n      constructor(git2, message)": "_error();\n    GitResponseError = class extends GitError {\n      constructor(git2, message)",
        "_error();\n    TaskConfigurationError = class extends GitError {\n      constructor(message)": "_error();\n    TaskConfigurationError = class extends GitError {\n      constructor(message)",
        "_error();\n    EMPTY_COMMANDS = [];\n  }\n})": "_error();\n    EMPTY_COMMANDS = [];\n  }\n})",
        "_error();\n    init_git_logger()": "_error();\n    init_git_logger()",
        "_error();\n    init_task()": "_error();\n    init_task()",
        "_error();\n    init_utils()": "_error();\n    init_utils()",
        "_error();\n    init_parse_merge()": "_error();\n    init_parse_merge()",
        "_error();\n    init_parse_branch_delete()": "_error();\n    init_parse_branch_delete()",
        "_error();\n    init_parse_pull()": "_error();\n    init_parse_pull()",
        "_error();\nvar GitConstructError = class extends GitError {\n  constructor(config, message)": "_error();\nvar GitConstructError = class extends GitError {\n  constructor(config, message)",
        "_error();\ninit_git_error()": "_error();\ninit_git_error()",
        "_error();\ninit_task_configuration_error()": "_error();\ninit_task_configuration_error()",
        "_error();\nfunction isTaskError(result)": "_error();\nfunction isTaskError(result)",
        "_error();\nvar simpleGit = gitInstanceFactory;\n\n// node_modules/set-interval-async/dist/dynamic/set-interval-async.mjs\nvar import_clear_interval_async = __toESM(require_clear_interval_async()": "_error();\nvar simpleGit = gitInstanceFactory;\n\n// node_modules/set-interval-async/dist/dynamic/set-interval-async.mjs\nvar import_clear_interval_async = __toESM(require_clear_interval_async()",
        "name: \"Sync with Remote\"": "name: \"Sync with Remote\"",
        "text: \"How to use this plugin\"": "text: \"How to use this plugin\"",
        "text: \"See the \"": "text: \"See the \"",
        "text: \"README\"": "text: \"README\"",
        "text: \" for more information and troubleshooting.\"": "text: \" for more information and troubleshooting.\"",
        ".setName(\"Remote URL\")": ".setName(\"Remote URL\")",
        ".setName(\"[OPTIONAL] git binary location\")": ".setName(\"[OPTIONAL] git binary location\")",
        ".setName(\"[OPTIONAL] Auto sync on startup\")": ".setName(\"[OPTIONAL] Auto sync on startup\")",
        ".setName(\"[OPTIONAL] Auto sync at interval\")": ".setName(\"[OPTIONAL] Auto sync at interval\")",
        ".setDesc(\"\").addText((text) => text.setPlaceholder(\"\")": ".setDesc(\"\").addText((text) => text.setPlaceholder(\"\")",
        ".setDesc(\"If git is not findable via your system PATH, then provide its location here\")": ".setDesc(\"如果在您的系统PATH中找不到git，那么在这里提供它的位置\")",
        ".setDesc(\"Automatically sync when you start obsidian if there are unsynced changes\")": ".setDesc(\"如果有未同步的更改，则在启动obsidian时自动同步\")",
        ".setDesc(\"Set a positive integer minute interval after which your vault is synced automatically. Auto sync is disabled if this field is left empty or not a positive integer. Restart Obsidan to take effect.\")": ".setDesc(\"设置一个正整数分钟间隔，之后保险库将自动同步。如果此字段为空或不是正整数，则禁用自动同步。重启Obsidan生效。\")",
        ".setPlaceholder(\"\").setValue(this.plugin.settings.remoteURL).onChange(async (value) => {\n      this.plugin.settings.remoteURL = value;\n      await this.plugin.saveSettings();\n    }).inputEl.addClass(\"my-plugin-setting-text\")": ".setPlaceholder(\"\").setValue(this.plugin.settings.remoteURL).onChange(async (value) => {\n      this.plugin.settings.remoteURL = value;\n      await this.plugin.saveSettings();\n    }).inputEl.addClass(\"my-plugin-setting-text\")",
        ".setPlaceholder(\"\").setValue(this.plugin.settings.gitLocation).onChange(async (value) => {\n      this.plugin.settings.gitLocation = value;\n      await this.plugin.saveSettings();\n    }).inputEl.addClass(\"my-plugin-setting-text2\")": ".setPlaceholder(\"\").setValue(this.plugin.settings.gitLocation).onChange(async (value) => {\n      this.plugin.settings.gitLocation = value;\n      await this.plugin.saveSettings();\n    }).inputEl.addClass(\"my-plugin-setting-text2\")"
    }
}
